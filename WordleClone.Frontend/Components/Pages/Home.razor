@page "/"
@using WordleClone.Frontend.Components.Model
@using WordleClone.Frontend.Components.Services

@inject DictionaryService dictionaryService
@inject KeyHandler keyHandler
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<PageTitle>Wordle</PageTitle>

<section id="top-bar">
    <h1>Wordle Clone</h1>
</section>

<section id="main-wrapper">
    <div class="game" tabindex="0" @onkeydown="@(HandleKeyDown)" >
        <ul class="attempts-list">
                @for (int attemptIndex = 0; attemptIndex < guesses.Length; attemptIndex++)
                {
                    <li class="attempt">
                        @for (int i = 0; i < 5; i++)
                        {
                            <div class="letter-square @(currentGuess > attemptIndex ? "checking" : "")" style="--d: @i; background: var(@colors[attemptIndex][i]);">
                                <p class="input-letter">@guesses[attemptIndex][i]</p>
                            </div>
                        }
                    </li>
                }
        </ul>
    </div>
    @if (currentWordDefinition is not null)
    {
        <section class="word-definition">
            <h3>@(currentWordDefinition.Word)</h3>
            <h5>@(currentWordDefinition.Meanings.First().PartOfSpeech)</h5>
            <p>@(currentWordDefinition.Meanings.First().Definitions.First().Defined)</p>
        </section>
    }
    else
    {
        <section class="word-definition border-red">
            <h3>word not found</h3>
            <h5>noun?</h5>
            <p class="definition">Word was not found. Delete some letters and you can try again on the same attempt.</p>
        </section>
    }
    <Keyboard KeyColors="keyColors" OnLetterAdded="AddLetter" OnCheckWord="() => CheckWord(guesses[currentGuess])" OnDeleteLetter="RemoveLetter" />
</section>

<script>
    const gameElement = document.querySelector('.game');
    sleep(1000).then(() => gameElement.focus());
</script>

@code {
    static readonly char[] topRow = ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'];
    static readonly char[] middleRow = ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'];
    static readonly char[] bottomRow = ['Z', 'X', 'C', 'V', 'B', 'N', 'M'];
    static readonly char[][] keyboardRows = [ topRow, middleRow, bottomRow ];
    static readonly string[] wordsArray = ["INNER", "BONUS", "RIDER", "LUNAR", "FLOWS"];

    Dictionary<char, string> keyColors = [];

    WordDefinition? currentWordDefinition;
    static string? word;
    static int currentGuess = 0;
    char[][] guesses = new char[6][];
    string[][] colors = new string[6][];

    Random random = new();

    protected override async Task OnInitializedAsync()
    {
        word = wordsArray[random.Next(0, wordsArray.Length)];
        for (int i = 0; i < guesses.Length; i++)
        {
            guesses[i] = new string(' ', 5).ToCharArray();
            colors[i] = Enumerable.Repeat("--empty", 5).ToArray();
        }

        currentWordDefinition = await dictionaryService.GetWordDefinition("guess");

        foreach (var key in keyboardRows.SelectMany(r => r))
        {
            keyColors[key] = "neutral";
        }
    }

    void AddLetter(char c)
    {
        int emptyIndex = Array.IndexOf(guesses[currentGuess], ' ');
        if (emptyIndex >= 0)
        {
            guesses[currentGuess][emptyIndex] = c;
            StateHasChanged();
        }
    }

    void RemoveLetter()
    {
        int emptyIndex = Array.IndexOf(guesses[currentGuess], ' ');
        if (emptyIndex > 0)
        {
            guesses[currentGuess][emptyIndex - 1] = ' ';
            StateHasChanged();
        }
        else if (emptyIndex == -1)
        {
            guesses[currentGuess][4] = ' ';
            StateHasChanged();
        }
        else return;
    }

    async Task CheckWord(char[] guess)
    {
        ArgumentNullException.ThrowIfNull(word);
        if (!guess.All(Char.IsLetter))
            return;

        string guessedWord = new string(guess).ToLower();

        currentWordDefinition = await dictionaryService.GetWordDefinition(guessedWord);

        if (currentWordDefinition is null)
            return;        

        string[] currentColors = Enumerable.Repeat("--grey", 5).ToArray();
        char[] target = word.ToCharArray();
        Dictionary<char, int> targetLetters = target.GroupBy(c => c).ToDictionary(g => g.Key, g => g.Count());

        for (int i = 0; i < 5; i++)
        {
            if (guess[i] == target[i])
            {
                currentColors[i] = "--green";
                keyColors[guess[i]] = "right-location";
                targetLetters[guess[i]]--;
            }
        }

        for (int i = 0; i < 5; i++)
        {
            char currentLetter = guess[i];
            if (currentColors[i] != "--green" && targetLetters.TryGetValue(currentLetter, out int frequency) && frequency > 0)
            {
                if (keyColors[currentLetter] != "right-location")
                {
                    keyColors[currentLetter] = "letter-guessed";
                }

                currentColors[i] = "--yellow";
                targetLetters[currentLetter]--;
            }
        }

        colors[currentGuess] = currentColors;
        currentGuess++;
        StateHasChanged();
    }

    void UpdateKeyColor(char key, string colorClass)
    {
        if (keyColors.ContainsKey(key))
        {
            keyColors[key] = colorClass;
        }
        else
        {
            keyColors.Add(key, colorClass);
        }

        StateHasChanged();
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Backspace")
        {
            RemoveLetter();
        }
        else if (e.Key == "Enter")
        {
            CheckWord(guesses[currentGuess]);
        }
        else if (char.IsLetter(e.Key[0]))
        {
            AddLetter(e.Key[0]);
        }
    }
}
